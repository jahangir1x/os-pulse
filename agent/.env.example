# OS-Pulse API Configuration Example
# Copy this file to .env or set these as environment variables

# Enable API forwarding (true/false)
OSPULSE_API_ENABLED=true

# API endpoint for forwarding monitoring events
# Backend server endpoint (default for development)
OSPULSE_API_ENDPOINT=http://localhost:8080/api

# API authentication key (if required by your endpoint)
OSPULSE_API_KEY=your-api-key-here

# Batch configuration
OSPULSE_API_BATCH_SIZE=10
OSPULSE_API_BATCH_TIMEOUT=5.0

# Request timeout in seconds
OSPULSE_API_TIMEOUT=10.0

# Log level (DEBUG, INFO, WARNING, ERROR)
OSPULSE_LOG_LEVEL=INFO

# Usage Instructions:
# 1. Set OSPULSE_API_ENDPOINT to your analysis service URL
# 2. Configure OSPULSE_API_KEY if authentication is required
# 3. Adjust batch settings based on your needs:
#    - Smaller batches for real-time analysis
#    - Larger batches for better performance
# 4. Run controller with: python main.py spawn --executable notepad.exe
# 5. Use interactive commands: api-test, api-stats, api-flush

# Event Format Sent to API:
# {
#   "event_type": "file_operation" | "process_creation",
#   "event_data": {
#     // Event-specific data (file path, process info, etc.)
#   },
#   "metadata": {
#     "operation": "ReadFile" | "WriteFile" | "NtCreateUserProcess",
#     "source": "os-pulse-injector",
#     "handler": "file_operation" | "process_creation",
#     "timestamp": "2024-01-15T12:00:00.000Z"
#   }
# }

# File Operation Event Example:
# {
#   "event_type": "file_operation",
#   "event_data": {
#     "operation": "WriteFile",
#     "file_path": "C:\\Users\\user\\document.txt",
#     "bytes_transferred": 256,
#     "content": "File content here...",
#     "timestamp": "2024-01-15T12:00:00.000Z",
#     "process_info": {
#       "name": "notepad.exe",
#       "pid": 1234,
#       "session_id": "session-abc123"
#     }
#   },
#   "metadata": {
#     "operation": "WriteFile",
#     "source": "os-pulse-injector",
#     "handler": "file_operation",
#     "timestamp": "2024-01-15T12:00:00.000Z"
#   }
# }
